/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package orc.proto;

option java_package = "org.apache.orc";

message IntegerStatistics  {
  optional sint64 minimum = 1;
  optional sint64 maximum = 2;
  optional sint64 sum = 3;
}

message DoubleStatistics {
  optional double minimum = 1;
  optional double maximum = 2;
  optional double sum = 3;
}

message StringStatistics {
  optional string minimum = 1;
  optional string maximum = 2;
  // sum will store the total length of all strings in a stripe
  optional sint64 sum = 3;
}

message BucketStatistics {
  repeated uint64 count = 1 [packed=true];
}

message DecimalStatistics {
  optional string minimum = 1;
  optional string maximum = 2;
  optional string sum = 3;
}

message DateStatistics {
  // min,max values saved as days since epoch
  optional sint32 minimum = 1;
  optional sint32 maximum = 2;
}

message TimestampStatistics {
  // min,max values saved as milliseconds since epoch
  optional sint64 minimum = 1;
  optional sint64 maximum = 2;
  optional sint64 minimumUtc = 3;
  optional sint64 maximumUtc = 4;
}

message BinaryStatistics {
  // sum will store the total binary blob length in a stripe
  optional sint64 sum = 1;//计算字节数量
}

//对列如何进行统计
message ColumnStatistics {
  optional uint64 numberOfValues = 1;//有多少个不同的值
  optional IntegerStatistics intStatistics = 2;//该列对应的int统计内容.即该列是int类型的
  optional DoubleStatistics doubleStatistics = 3;
  optional StringStatistics stringStatistics = 4;
  optional BucketStatistics bucketStatistics = 5;//boolean类型的列的统计
  optional DecimalStatistics decimalStatistics = 6;
  optional DateStatistics dateStatistics = 7;
  optional BinaryStatistics binaryStatistics = 8;
  optional TimestampStatistics timestampStatistics = 9;
  optional bool hasNull = 10;//该列是否有null这个属性值
}

message RowIndexEntry {
  repeated uint64 positions = 1 [packed=true];//repeated 表示一个List或者vector,存储若干个long值
  optional ColumnStatistics statistics = 2;
}

message RowIndex {
  repeated RowIndexEntry entry = 1;//一个List持有RowIndexEntry,即long类型的二维数组
}

message BloomFilter {
  optional uint32 numHashFunctions = 1;//表示多少个hash函数
  repeated fixed64 bitset = 2;//若干个long类型组成的bitset,里面是有内容的,即BloomFilter已经设置好的内容
  optional bytes utf8bitset = 3;
}

message BloomFilterIndex {
  repeated BloomFilter bloomFilter = 1;//持有若干个BloomFilter
}

message Stream {
  // if you add new index stream kinds, you need to make sure to update
  // StreamName to ensure it is added to the stripe in the right area
  enum Kind {
    PRESENT = 0;
    DATA = 1;
    LENGTH = 2;
    DICTIONARY_DATA = 3;
    DICTIONARY_COUNT = 4;
    SECONDARY = 5;
    ROW_INDEX = 6;
    BLOOM_FILTER = 7;//BloomFilterUtf8或者BloomFilter
    BLOOM_FILTER_UTF8 = 8;//BloomFilterUtf8
  }
  optional Kind kind = 1;
  optional uint32 column = 2;
  optional uint64 length = 3;
}

message ColumnEncoding {
  enum Kind {
    DIRECT = 0;
    DICTIONARY = 1;
    DIRECT_V2 = 2;
    DICTIONARY_V2 = 3;
  }
  optional Kind kind = 1;
  optional uint32 dictionarySize = 2;

  // The encoding of the bloom filters for this column:
  //   0 or missing = none or original
  //   1            = ORC-135 (utc for timestamps)
  optional uint32 bloomEncoding = 3;
}

message StripeFooter {
  repeated Stream streams = 1;
  repeated ColumnEncoding columns = 2;
  optional string writerTimezone = 3;
}

//表示一个schema对应的全部类型信息,通过对该信息的反序列化,可以得到一个根节点的schema全部信息
//该对象用于存储在Footer中
message Type {
  enum Kind {//定义列的类型
    BOOLEAN = 0;
    BYTE = 1;
    SHORT = 2;
    INT = 3;
    LONG = 4;
    FLOAT = 5;
    DOUBLE = 6;
    STRING = 7;
    BINARY = 8;
    TIMESTAMP = 9;
    LIST = 10;
    MAP = 11;
    STRUCT = 12;
    UNION = 13;
    DECIMAL = 14;
    DATE = 15;
    VARCHAR = 16;
    CHAR = 17;
  }
  optional Kind kind = 1;//定义列的类型
  repeated uint32 subtypes = 2 [packed=true];//在复杂集合中都需要该对象,该对象存储子对象对应的ID
  repeated string fieldNames = 3;//在STRUCT中需要该字段
  optional uint32 maximumLength = 4;//char和VARCHAR时候要定义该字段
  optional uint32 precision = 5;//DECIMAL时候要定义该字段
  optional uint32 scale = 6;//DECIMAL时候要定义该字段
}

message StripeInformation {
  optional uint64 offset = 1;//该strips在文件的开始位置
  optional uint64 indexLength = 2;//以下三个总长度之和,表示该strips占用总文件多少个字节
  optional uint64 dataLength = 3;
  optional uint64 footerLength = 4;
  optional uint64 numberOfRows = 5;//该strips有多少行数据
}

message UserMetadataItem {
  optional string name = 1;
  optional bytes value = 2;
}

message StripeStatistics {
  repeated ColumnStatistics colStats = 1;//每一个Stripe对应若干个ColumnStatistics统计信息,一个列对应一个ColumnStatistics,但是该列可能是复杂对象,有子对象,因此持有的是一个集合
}

message Metadata {
  repeated StripeStatistics stripeStats = 1;
}

message Footer {
  optional uint64 headerLength = 1;
  optional uint64 contentLength = 2;
  repeated StripeInformation stripes = 3;//保存一组StripeInformation集合
  repeated Type types = 4;//保存schema元数据集合
  repeated UserMetadataItem metadata = 5;
  optional uint64 numberOfRows = 6;
  repeated ColumnStatistics statistics = 7;
  optional uint32 rowIndexStride = 8;
}

//描述压缩的类型
enum CompressionKind {
  NONE = 0;
  ZLIB = 1;
  SNAPPY = 2;
  LZO = 3;
  LZ4 = 4;
  ZSTD = 5;
}

// Serialized length must be less that 255 bytes
//必须一个字节内表示该对象
message PostScript {
  optional uint64 footerLength = 1;
  optional CompressionKind compression = 2;//保存文件内容的压缩方式
  optional uint64 compressionBlockSize = 3;
  // the version of the file format
  //   [0, 11] = Hive 0.11
  //   [0, 12] = Hive 0.12
  repeated uint32 version = 4 [packed = true];
  optional uint64 metadataLength = 5;
  // Version of the writer:
  //   0 (or missing) = original
  //   1 = HIVE-8732 fixed
  //   2 = HIVE-4243 fixed
  //   3 = HIVE-12055 fixed
  //   4 = HIVE-13083 fixed
  //   5 = ORC-101 fixed
  //   6 = ORC-135 fixed
  optional uint32 writerVersion = 6;
  // Leave this last in the record
  optional string magic = 8000;//记录在最后
}

// The contents of the file tail that must be serialized.文件尾部的内容,必须序列化
// This gets serialized as part of OrcSplit, also used by footer cache.
//表示文件尾巴对象
message FileTail {
  optional PostScript postscript = 1;//根据postscriptLength反序列化后的PostScript对象
  optional Footer footer = 2;//根据PostScript对象可以获取footer的长度,从而反序列化得到footer对象
  optional uint64 fileLength = 3;//整个文件的总长度
  optional uint64 postscriptLength = 4;//解析最后一个字节,可以获取postScript的长度
}
//FileTail文件的定义
1.最后一部分存储PostScript+ PostScript的长度,并且此时长度是一个字节就可以包含的,不允许超过一个字节
2. PostScript的存储中最后一个部分是magic
3.格式布局
首先是metadata
然后是footer
然后是postScript
最后一个字节是postScript占用的字节数量
4. FileTail尾巴对象是解析后的结果
5.反序列化过程
a.通过获取最后一个字节,得到postScript字节长度。从而反序列化postScript对象
该对象包含:footer的长度、压缩方式、压缩的缓冲区大小、文件format的格式、metadata的长度、
writer的版本号、magic
b.从而可以获取footer对象和metadata对象
